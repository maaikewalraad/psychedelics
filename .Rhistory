rm(list = ls())
require(data.table)
require(magrittr) # special pipe operators
require(psych) # describe()
require(dplyr) # data wrangling
require(knitr)
require(ggpubr)
set.seed(7079540) # for reproducibility
# Import data
dt <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_DATA.csv")
dt %<>% as.data.table
md <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_CODEBOOK.csv") # metadata
md %<>% as.data.table
dt %<>% select(PHQ9_SCORE, PM1_DIAG_CONDITION, C_DP) # keep used variables only
str(dt)
# Inclusion criteria include:
dt %<>% filter(C_DP == 1) # experienced depression last year
dt %<>% filter(PM1_DIAG_CONDITION != -99) # keep category 0 and 1 only (no need to use C_DP since these people are *diagnosed* with some psychiatric disorder)
dt$PM1_DIAG_CONDITION <- factor(dt$PM1_DIAG_CONDITION, levels = c(0, 1))
md[VAR == "PHQ9_GE10"]$Description
#dt %<>% filter(PHQ9_GE10 == 1) # "while most patients (88%) with major depression had scores of 10 or greater."
dt %<>% filter(PHQ9_SCORE >= 15) # most patients with PHQ9 score of 15 or higher get treatment
# Descriptive statistics -----------------------------------------------------
describeBy(dt$PHQ9_SCORE, dt$PM1_DIAG_CONDITION)
mod <- lm(PHQ9_SCORE ~ PM1_DIAG_CONDITION, data = dt)
summary(mod)
# linearity
plot(dt$PM1_DIAG_CONDITION, dt$PHQ9_SCORE)
# homoscedasticity (constant residual variance)
plot(mod)[1]
# normality in the outcome
dt %$% hist(PHQ9_SCORE) # DEPENDENT VARIABLE
dt %>% filter(PM1_DIAG_CONDITION == 0) %$% hist(PHQ9_SCORE)
dt %>% filter(PM1_DIAG_CONDITION == 1) %$% hist(PHQ9_SCORE)
rm(list = ls())
require(data.table)
require(magrittr) # special pipe operators
require(psych) # describe()
require(dplyr) # data wrangling
require(knitr)
require(ggpubr)
set.seed(7079540) # for reproducibility
# Import data
dt <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_DATA.csv")
dt %<>% as.data.table
md <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_CODEBOOK.csv") # metadata
md %<>% as.data.table
# Data wrangling ----------------------------------------------------------
dt %<>% select(PHQ9_SCORE, PM1_DIAG_CONDITION, C_DP) # keep used variables only
str(dt)
# Inclusion criteria include:
dt %<>% filter(C_DP == 1) # experienced depression last year
dt %<>% filter(PM1_DIAG_CONDITION != -99) # keep category 0 and 1 only (no need to use C_DP since these people are *diagnosed* with some psychiatric disorder)
dt$PM1_DIAG_CONDITION <- factor(dt$PM1_DIAG_CONDITION, levels = c(0, 1))
md[VAR == "PHQ9_GE10"]$Description
#dt %<>% filter(PHQ9_GE10 == 1) # "while most patients (88%) with major depression had scores of 10 or greater."
dt %<>% filter(PHQ9_SCORE >= 15) # most patients with PHQ9 score of 15 or higher get treatment
# Fit standard linear model -----------------------------------------------
mod <- lm(PHQ9_SCORE ~ PM1_DIAG_CONDITION, data = dt)
summary(mod)
# linearity
plot(dt$PM1_DIAG_CONDITION, dt$PHQ9_SCORE)
abline(mod) # add fitted regression line to scatterplot
plot(dt$PM1_DIAG_CONDITION, dt$PHQ9_SCORE)
abline(mod)
# homoscedasticity (constant residual variance)
plot(mod)[1]
# linearity
plot(dt$PM1_DIAG_CONDITION, dt$PHQ9_SCORE)
abline(mod) # add fitted regression line to scatterplot
# homoscedasticity (constant residual variance)
plot(mod)[1]
# normality in the outcome
dt %$% hist(PHQ9_SCORE) # DEPENDENT VARIABLE
dt %>% filter(PM1_DIAG_CONDITION == 0) %$% hist(PHQ9_SCORE)
dt %>% filter(PM1_DIAG_CONDITION == 1) %$% hist(PHQ9_SCORE)
# normality in the outcome
dt %$% hist(PHQ9_SCORE) # DEPENDENT VARIABLE
dt %>% filter(PM1_DIAG_CONDITION == 0) %$% hist(PHQ9_SCORE)
dt %>% filter(PM1_DIAG_CONDITION == 1) %$% hist(PHQ9_SCORE)
m
# Informative priors. These are based on the historical data (see manuscript)
# b0
mu00 <- mean(dt$PHQ9_SCORE)
# Informative priors. These are based on the historical data (see manuscript)
# b0
mu00 <- mean(dt[PM1_DIAG_CONDITION == 0, PHQ9_SCORE])
dt$PM1_DIAG_CONDITION <- ifelse(dt$PM1_DIAG_CONDITION == 1, 1, 0) # make numeric
# Informative priors. These are based on the historical data (see manuscript)
# b0
mu00 <- mean(dt[PM1_DIAG_CONDITION == 0, PHQ9_SCORE])
hist(dt$PHQ9_SCORE)
zeta00 <- sd(dt[PHQ9_SCORE])
zeta00 <- sd(dt[, PHQ9_SCORE])
?df()
zeta10 <- 1 / 2.9
nu10 <- 100 # prior df's -> bigger = wider tails
# variance (σ^2)
a_0 = 1
b_0 = 1
sig2_0 = 1/rgamma(1, shape = a_0, rate = b_0)
# Informative priors. These are based on the historical data (see manuscript)
# b0
mu00 <- mean(dt[PM1_DIAG_CONDITION == 0, PHQ9_SCORE])
zeta00 <- sd(dt[, PHQ9_SCORE])
# b1
mu10 <- 4.8
zeta10 <- 1 / 2.9
nu10 <- 100 # prior df's -> bigger = wider tails
# variance (σ^2)
a_0 = 1
b_0 = 1
sig2_0 = 1/rgamma(1, shape = a_0, rate = b_0)
post_b1 <- function(b0, b1, sig2, y, x1) { # MH function for b1
I <- -(b1^2) * ((sum(x1^2))/(2*sig2)) + b1 * ((sum(x1*(y - b0))) / (sig2))
II <- (1 + ((b1 - mu10)^2)/(nu10*zeta10))^((nu10+1)/2)
r_post <- exp(I) * II
return(r_post)
}
gibbs.chains <- function(b0, b1, sig2, y, x1) {
set.seed(7079540)
warmup <- 1000
H <- 25000 + warmup # number of samples drawn
n_par <- 3
simulated <- matrix(0, nrow = H, ncol = n_par)
colnames(simulated) <- c("b0","b1", "sig2")
simulated[1, ] <- c(b0, b1, sig2)
for (h in 2:H) {
# determine full conditional value for...
# b0:
mu0 <- (sum(y-b1*x1)/sig2 + (mu00/zeta00))/((nrow(dt) / sig2) + (1 / zeta00))
sd0 <- sqrt(1 / ((nrow(dt) / sig2) + (1 / zeta00)))
b0 <- rnorm(1, mu0, sd0)
# b1 (incl. MH, Non-conjugate prior):
beta1_c <- b1
beta1_n <- rnorm(1, mean = 0, sd = 1)   # Sample from proposal density
r_post <- post_b1(b0, beta1_n, sig2, y, x1)/post_b1(b0, beta1_c, sig2, y, x1) # Ratio of posterior
r_prop <- beta1_c / beta1_n   # Ratio of proposal distribution
r <- r_post * r_prop # Acceptance ratio r
u <- runif(1, min = 0, max = 1)   # 'Sample a probability' from the uniform distribution
ifelse(u <= abs(r), b1 <- beta1_n, b1 <- beta1_c)
# # b1 (exc. MH)
# mu1 <- (sum(x1*(y-b0)) / sig2 + (mu10/zeta10)) / ((sum(x1^2) / sig2) + (1 / zeta10))
# sd1 <- sqrt(1 / ((sum(x1^2) / sig2) + (1 / zeta10)))
# b1 <- rnorm(1, mu1, sd1)
# var:
a_1 <- (nrow(dt) / 2) + a_0 # posterior shape
S <- sum(y - (b0 + b1*x1))^2 # RSS
b_1 <- (S / 2) + b_0 # posterior scale
sig2 <- 1 / rgamma(1, a_1, b_1)
simulated[h, ] <- c(b0, b1, sig2)  # Save them all
}
return(simulated)
}
# Choose starting values for each of the parameters
chain1 <- gibbs.chains(b0 = 0.2, b1 = 0.3, sig2 = 0.5, y = dt$PHQ9_SCORE, x1 = dt$PM1_DIAG_CONDITION)
chain2 <- gibbs.chains(b0 = 2, b1 = 3, sig2 = 5, y = dt$PHQ9_SCORE, x1 = dt$PM1_DIAG_CONDITION)
# Subset chains
chain1 %<>% as.data.table()
chain2 %<>% as.data.table()
parameters <- colnames(chain1)  # saving for plot
parameters
# Parameter estimates (first chain):
perc <- c(0.025, 0.975)
# b0:
chains_b0 <- cbind(chain1[1001:nrow(chain1), 1], chain2[1001:nrow(chain2), 1])  # extract b0 & remove the warm up
colnames(chains_b0) <- c("chain1", "chain2")
# b1:
chains_b1 <- cbind(chain1[1001:nrow(chain1), 2], chain2[1001:nrow(chain2), 2])   # extract b1 & remove the warm up
colnames(chains_b1) <- c("chain1", "chain2")
# var:
chains_var <- cbind(chain1[1001:nrow(chain1), 3], chain2[1001:nrow(chain2), 3])   # extract variance & remove the warm up
colnames(chains_var) <- c("chain1", "chain2")
#### Alternatively
mcmcplot(mcmcout = chains_b0)
require(mcmcplots)
require(mcmcplot)
require(mcmcplots)
install.packages("mcmcplots")
#### Alternatively
require(mcmcplots)
mcmcplot(mcmcout = chains_b0)
mcmcplot(mcmcout = chains_b1)
mcmcplot(mcmcout = chains_var)
# Parameter estimates (first chain):
perc <- c(0.025, 0.975)
bhat0_1 <- c(mean(chains_b0[, 1]), sd(chains_b0[, 1]), quantile(chains_b0[, 1], perc))
mean(chains_b0[, 1])
chains_b0[, 1]
str(chains_b0)
bhat0_1 <- c(mean(chains_b0[, 1]), sd(chains_b0[, 1]), quantile(chains_b0[, 1], perc))
sd(chains_b0[, 1])
str(chains_b0)
bhat0_1 <- c(mean(chains_b0[, 1]), sd(chains_b0[, 1]), quantile(chains_b0[, 1], perc))
mean(chains_b0[, 1])
chains_b0[, 1]
bhat0_1 <- c(mean(chains_b0[, 1]), sd(chains_b0[, 1]), quantile(chains_b0[, 1], perc))
rm(chain1, chain2)
mean(chains_b0$chain1)
mean(chains_b1$chain1)
mean(chains_b2$chain1)
mean(chains_b1$chain2)
summary(mod)
mean(chains_b0[1])
mean(chains_b0$chain1)
bhat0_1 <- c(mean(chains_b0$chain1), sd(chains_b0$chain1), quantile(chains_b0$chain1, perc))
bhat1_1 <- c(mean(chains_b1$chain1), sd(chains_b1$chain1), quantile(chains_b1$chain1, perc))
# Where is sig2? chains_sig2
estimates_c1 <- rbind(bhat0_1, bhat1_1) # also add variance mean
rownames(estimates_c1) <- c("Intercept", "PM")
colnames(estimates_c1) <- c("Beta", "SD", "2.5% ", "97.5%")
estimates_c1
summary(mod)
rm(list = ls())
require(data.table)
require(magrittr) # special pipe operators
require(psych) # describe()
require(dplyr) # data wrangling
require(knitr)
require(ggpubr)
set.seed(7079540) # for reproducibility
# Import data
dt <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_DATA.csv")
dt %<>% as.data.table
md <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_CODEBOOK.csv") # metadata
md %<>% as.data.table
# Data wrangling ----------------------------------------------------------
dt %<>% select(PHQ9_SCORE, PM1_DIAG_CONDITION, C_DP) # keep used variables only
str(dt)
# Inclusion criteria include:
dt %<>% filter(C_DP == 1) # experienced depression last year
dt %<>% filter(PM1_DIAG_CONDITION != -99) # keep category 0 and 1 only (no need to use C_DP since these people are *diagnosed* with some psychiatric disorder)
dt$PM1_DIAG_CONDITION <- factor(dt$PM1_DIAG_CONDITION, levels = c(0, 1))
md[VAR == "PHQ9_GE10"]$Description
#dt %<>% filter(PHQ9_GE10 == 1) # "while most patients (88%) with major depression had scores of 10 or greater."
dt %<>% filter(PHQ9_SCORE >= 15) # most patients with PHQ9 score of 15 or higher get treatment
rm(list = ls())
require(data.table)
require(magrittr) # special pipe operators
require(psych) # describe()
require(dplyr) # data wrangling
require(knitr)
require(ggpubr)
set.seed(7079540) # for reproducibility
# Import data
dt <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_DATA.csv")
dt %<>% as.data.table
md <- read.csv("Data/AHRI_DATASET_PM_MANUSCRIPT_CODEBOOK.csv") # metadata
md %<>% as.data.table
# Data wrangling ----------------------------------------------------------
dt %<>% select(PHQ9_SCORE, PM1_DIAG_CONDITION, C_DP) # keep used variables only
str(dt)
# Inclusion criteria include:
dt %<>% filter(C_DP == 1) # experienced depression last year
dt %<>% filter(PM1_DIAG_CONDITION != -99) # keep category 0 and 1 only (no need to use C_DP since these people are *diagnosed* with some psychiatric disorder)
dt$PM1_DIAG_CONDITION <- factor(dt$PM1_DIAG_CONDITION, levels = c(0, 1))
md[VAR == "PHQ9_GE10"]$Description
#dt %<>% filter(PHQ9_GE10 == 1) # "while most patients (88%) with major depression had scores of 10 or greater."
dt %<>% filter(PHQ9_SCORE >= 15) # most patients with PHQ9 score of 15 or higher get treatment
# Descriptive statistics -----------------------------------------------------
describeBy(dt$PHQ9_SCORE, dt$PM1_DIAG_CONDITION)
# Fit standard linear model -----------------------------------------------
mod <- lm(PHQ9_SCORE ~ PM1_DIAG_CONDITION, data = dt)
summary(mod)
# Uninformative priors
# b0
mu00 <- 1
zeta00 <- 1.0E4
# b1
mu10 <- 1
zeta10 <- 1.0E4
nu10 <- 100 # prior df's -> bigger = wider tails
# variance (σ^2)
a_0 = 1
b_0 = 1
sig2_0 = 1/rgamma(1, shape = a_0, rate = b_0)
post_b1 <- function(b0, b1, sig2, y, x1) { # MH function for b1
I <- -(b1^2) * ((sum(x1^2))/(2*sig2)) + b1 * ((sum(x1*(y - b0))) / (sig2))
II <- (1 + ((b1 - mu10)^2)/(nu10*zeta10))^((nu10+1)/2)
r_post <- exp(I) * II
return(r_post)
}
gibbs.chains <- function(b0, b1, sig2, y, x1) {
set.seed(7079540)
warmup <- 1000
H <- 25000 + warmup # number of samples drawn
n_par <- 3
simulated <- matrix(0, nrow = H, ncol = n_par)
colnames(simulated) <- c("b0","b1", "sig2")
simulated[1, ] <- c(b0, b1, sig2)
for (h in 2:H) {
# determine full conditional value for...
# b0:
mu0 <- (sum(y-b1*x1)/sig2 + (mu00/zeta00))/((nrow(dt) / sig2) + (1 / zeta00))
sd0 <- sqrt(1 / ((nrow(dt) / sig2) + (1 / zeta00)))
b0 <- rnorm(1, mu0, sd0)
# b1 (incl. MH, Non-conjugate prior):
beta1_c <- b1
beta1_n <- rnorm(1, mean = 0, sd = 1)   # Sample from proposal density
r_post <- post_b1(b0, beta1_n, sig2, y, x1)/post_b1(b0, beta1_c, sig2, y, x1) # Ratio of posterior
r_prop <- beta1_c / beta1_n   # Ratio of proposal distribution
r <- r_post * r_prop # Acceptance ratio r
u <- runif(1, min = 0, max = 1)   # 'Sample a probability' from the uniform distribution
ifelse(u <= abs(r), b1 <- beta1_n, b1 <- beta1_c)
# # b1 (exc. MH)
# mu1 <- (sum(x1*(y-b0)) / sig2 + (mu10/zeta10)) / ((sum(x1^2) / sig2) + (1 / zeta10))
# sd1 <- sqrt(1 / ((sum(x1^2) / sig2) + (1 / zeta10)))
# b1 <- rnorm(1, mu1, sd1)
# var:
a_1 <- (nrow(dt) / 2) + a_0 # posterior shape
S <- sum(y - (b0 + b1*x1))^2 # RSS
b_1 <- (S / 2) + b_0 # posterior scale
sig2 <- 1 / rgamma(1, a_1, b_1)
simulated[h, ] <- c(b0, b1, sig2)  # Save them all
}
return(simulated)
}
str(dt)
dt$PM1_DIAG_CONDITION <- ifelse(dt$PM1_DIAG_CONDITION == 1, 1, 0) # make numeric
str(dt)
# Choose starting values for each of the parameters
chain1 <- gibbs.chains(b0 = 0.2, b1 = 0.3, sig2 = 0.5, y = dt$PHQ9_SCORE, x1 = dt$PM1_DIAG_CONDITION)
chain2 <- gibbs.chains(b0 = 2, b1 = 3, sig2 = 5, y = dt$PHQ9_SCORE, x1 = dt$PM1_DIAG_CONDITION)
# Subset chains
chain1 %<>% as.data.table()
chain2 %<>% as.data.table()
parameters <- colnames(chain1)  # saving for plot
# b0:
chains_b0 <- cbind(chain1[1001:nrow(chain1), 1], chain2[1001:nrow(chain2), 1])  # extract b0 & remove the warm up
colnames(chains_b0) <- c("chain1", "chain2")
# b1:
chains_b1 <- cbind(chain1[1001:nrow(chain1), 2], chain2[1001:nrow(chain2), 2])   # extract b1 & remove the warm up
colnames(chains_b1) <- c("chain1", "chain2")
# var:
chains_var <- cbind(chain1[1001:nrow(chain1), 3], chain2[1001:nrow(chain2), 3])   # extract variance & remove the warm up
colnames(chains_var) <- c("chain1", "chain2")
rm(chain1, chain2)
mcmcplot(mcmcout = chains_b0)
#### Alternatively
require(mcmcplots)
mcmcplot(mcmcout = chains_b0)
mcmcplot(mcmcout = chains_b1)
mcmcplot(mcmcout = chains_var)
# Parameter estimates (first chain):
perc <- c(0.025, 0.975)
bhat0_1 <- c(mean(chains_b0$chain1), sd(chains_b0$chain1), quantile(chains_b0$chain1, perc))
bhat1_1 <- c(mean(chains_b1$chain1), sd(chains_b1$chain1), quantile(chains_b1$chain1, perc))
sig2_1 <- c(mean(chains_var$chain1), sd(chains_var$chain1), quantile(chains_var$chain1, perc))
estimates_c1 <- rbind(bhat0_1, bhat1_1) # also add variance mean
rownames(estimates_c1) <- c("Intercept", "PM")
colnames(estimates_c1) <- c("Beta", "SD", "2.5% ", "97.5%")
estimates_c1
summary(mod)
# Parameter estimates (second chain):
bhat0_2 <- c(mean(chains_b0[, 2]), sd(chains_b0[, 2]), quantile(chains_b0[, 2], perc))
bhat1_2 <- c(mean(chains_b1[, 2]), sd(chains_b1[, 2]), quantile(chains_b1[, 2], perc))
str(chains_b0)
View(chains_var)
# Choose starting values for each of the parameters
chain1 <- gibbs.chains(b0 = 0.2, b1 = 0.3, sig2 = 0.5, y = dt$PHQ9_SCORE, x1 = dt$PM1_DIAG_CONDITION)
chain2 <- gibbs.chains(b0 = 2, b1 = 3, sig2 = 5, y = dt$PHQ9_SCORE, x1 = dt$PM1_DIAG_CONDITION)
chain1 %<>% as.data.table()
chain2 %<>% as.data.table()
ncol(chain1)
chain1[, apply(.SD, mean)]
chain1[, apply(x, .SD, mean(x))]
chain1[, apply(.SD, mean(x))]
chain1[, lapply(.SD, mean]
chain1[, lapply(.SD, mean)]
chain1[, apply(.SD, mean)]
chain1[, lapply(.SD, mean)]
chain1[, sapply(.SD, mean)]
x <- chain1[, sapply(.SD, mean)]
str(x)
x <- chain1[, lapply(.SD, mean)]
str(x)
z <- chain1[, sapply(.SD, quantile(., perc))]
z <- chain1[, sapply(.SD, quantile(perc))]
z <- chain1[, sapply(.SD, function(x) quantile(x, perc))]
z
t(z)
rbind(x, y, z)
y <- chain1[, sapply(.SD, sd)]
rbind(x, y, z)
rbind(t(x), t(y), t(z)))
rbind(t(x), t(y), t(z))
t(z)
t(y)
y
t(y)
t(x)
x
str(x)
x <- chain1[, lapply(.SD, mean)]
y <- chain1[, lapply(.SD, sd)]
z <- chain1[, lapply(.SD, function(x) quantile(x, perc))]
rbind(t(x), t(y), t(z))
t(y)
t(z)
t(x)
rbind(t(x), t(y), t(z))
t(z)
cbind(t(x), t(y), t(z))
y
cbind(t(x), t(y), t(z))
z
estimates_c2
estimates_c1
gibbs_stats(chain1)
gibbs_stats(chain1)
gibbs_stats <- function(chain) {
perc <- c(0.025, 0.975)
x <- chain[, lapply(.SD, mean)]
y <- chain[, lapply(.SD, sd)]
z <- chain[, lapply(.SD, function(x) quantile(x, perc))]
estimates <- cbind(t(x), t(y), t(z))
rownames(estimates) <- c("Intercept", "PM", "Variance")
colnames(estimates) <- c("Beta", "SD", "2.5% ", "97.5%")
print(estimates)
}
gibbs_stats(chain1)
estimates_c1
cat(gibbs_stats(chain1),
gibbs_stats(chain2))
gibbs_stats(chain2)
print(gibbs_stats(chain1),
gibbs_stats(chain2))
gibbs_stats(chain1)
gibbs_stats(chain1)
identical(chain1, chain2)
identical(gibbs_stats(chain1), gibbs_stats(chain2))
identical(gibbs_stats(chain1), gibbs_stats(chain2))
gibbs_stats(chain1)$Beta
identical(gibbs_stats(chain1)[1], gibbs_stats(chain2))
gibbs_stats(chain1)[1]
# Traceplots
traceplot <- function(chains) {   # only handles 2 chains (per parameter)
x <- 0
colnames <- NULL;
while (x < ncol(chains))  {
x <- x+1
colnames <- c(colnames, paste0("chain", x, collapse = "," ))
}
traceplot <- chains %>%
ggplot(aes(x = 1:nrow(chains))) +
geom_line(aes(y = chain1), color = "#CC3399", linetype = "dashed", size = 0.4, alpha = 0.8) +
geom_line(aes(y = chain2), color= "#339966", linetype = "twodash", size = 0.4, alpha = 0.6) +
ggtitle("Convergence plot") +
ylab("Sampled value") +
xlab("Number of iterations") +
theme(
plot.title = element_text(color = "black", size = 11, face = "bold.italic", hjust = 0.45),
axis.title.x = element_text(color = "#333333", size = 10, face = "bold"),
axis.title.y = element_text(color = "#333333", size = 10, face = "bold"))
return(traceplot)
}
traceplots <- ggarrange(traceplot(chains_b0), traceplot(chains_b1), traceplot(chains_var),
labels = parameters,
ncol = 2, nrow = 2)
annotate_figure(traceplots,
top = text_grob("Traceplots for the parameters (2 chains each) \n", color = "black", size = 18, face = "bold.italic"))
chains = chains_b0
x <- 0
colnames <- NULL;
while (x < ncol(chains))  {
x <- x+1
colnames <- c(colnames, paste0("chain", x, collapse = "," ))
}
x
ncol(chains)
traceplot <- chains %>%
ggplot(aes(x = 1:nrow(chains))) +
geom_line(aes(y = chain1), color = "#CC3399", linetype = "dashed", size = 0.4, alpha = 0.8) +
geom_line(aes(y = chain2), color = "#339966", linetype = "twodash", size = 0.4, alpha = 0.6) +
ggtitle("Convergence plot") +
ylab("Sampled value") +
xlab("Number of iterations") +
theme(
plot.title = element_text(color = "black", size = 11, face = "bold.italic", hjust = 0.45),
axis.title.x = element_text(color = "#333333", size = 10, face = "bold"),
axis.title.y = element_text(color = "#333333", size = 10, face = "bold"))
traceplot
chains %>% View()
View(traceplot)
print(traceplot)
mcmcplot(mcmcout = chains_b0)
chains
traceplot <- chains %>%
ggplot(aes(x = 1:nrow(chains))) +
geom_line(aes(y = chain1), color = "#CC3399", size = 0.4, alpha = 0.8) +
geom_line(aes(y = chain2), color = "#339966", size = 0.4, alpha = 0.6) +
ggtitle("Convergence plot") +
ylab("Sampled value") +
xlab("Number of iterations") +
theme(
plot.title = element_text(color = "black", size = 11, face = "bold.italic", hjust = 0.45),
axis.title.x = element_text(color = "#333333", size = 10, face = "bold"),
axis.title.y = element_text(color = "#333333", size = 10, face = "bold"))
traceplot
getwd()
